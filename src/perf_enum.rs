// **** DO NOT modify this file! ****
// This file is generated by cmd:
//   gen_perf_metrics.bash rocksdb/monitoring/perf_context.cc

/// Rust representation of the performance metrics from RocksDB's perf_context
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum PerfMetric {
    UserKeyComparisonCount = 0,
    BlockCacheHitCount = 1,
    BlockReadCount = 2,
    BlockReadByte = 3,
    BlockReadTime = 4,
    BlockChecksumTime = 5,
    BlockDecompressTime = 6,
    GetReadBytes = 7,
    MultigetReadBytes = 8,
    IterReadBytes = 9,
    InternalKeySkippedCount = 10,
    InternalDeleteSkippedCount = 11,
    InternalRecentSkippedCount = 12,
    InternalMergeCount = 13,
    GetSnapshotTime = 14,
    GetFromMemtableTime = 15,
    GetFromMemtableCount = 16,
    GetPostProcessTime = 17,
    GetFromOutputFilesTime = 18,
    SeekOnMemtableTime = 19,
    SeekOnMemtableCount = 20,
    NextOnMemtableCount = 21,
    PrevOnMemtableCount = 22,
    SeekChildSeekTime = 23,
    SeekChildSeekCount = 24,
    SeekMinHeapTime = 25,
    SeekMaxHeapTime = 26,
    SeekInternalSeekTime = 27,
    FindNextUserEntryTime = 28,
    WriteWalTime = 29,
    WriteMemtableTime = 30,
    WriteDelayTime = 31,
    WritePreAndPostProcessTime = 32,
    DbMutexLockNanos = 33,
    DbConditionWaitNanos = 34,
    MergeOperatorTimeNanos = 35,
    ReadIndexBlockNanos = 36,
    ReadFilterBlockNanos = 37,
    NewTableBlockIterNanos = 38,
    NewTableIteratorNanos = 39,
    BlockSeekNanos = 40,
    FindTableNanos = 41,
    BloomMemtableHitCount = 42,
    BloomMemtableMissCount = 43,
    BloomSstHitCount = 44,
    BloomSstMissCount = 45,
    KeyLockWaitTime = 46,
    KeyLockWaitCount = 47,
    EnvNewSequentialFileNanos = 48,
    EnvNewRandomAccessFileNanos = 49,
    EnvNewWritableFileNanos = 50,
    EnvReuseWritableFileNanos = 51,
    EnvNewRandomRwFileNanos = 52,
    EnvNewDirectoryNanos = 53,
    EnvFileExistsNanos = 54,
    EnvGetChildrenNanos = 55,
    EnvGetChildrenFileAttributesNanos = 56,
    EnvDeleteFileNanos = 57,
    EnvCreateDirNanos = 58,
    EnvCreateDirIfMissingNanos = 59,
    EnvDeleteDirNanos = 60,
    EnvGetFileSizeNanos = 61,
    EnvGetFileModificationTimeNanos = 62,
    EnvRenameFileNanos = 63,
    EnvLinkFileNanos = 64,
    EnvLockFileNanos = 65,
    EnvUnlockFileNanos = 66,
    EnvNewLoggerNanos = 67,
    NumberAsyncSeek = 68,
    BlobCacheHitCount = 69,
    BlobReadCount = 70,
    BlobReadByte = 71,
    BlobReadTime = 72,
    BlobChecksumTime = 73,
    BlobDecompressTime = 74,
    InternalRangeDelReseekCount = 75,
    BlockReadCpuTime = 76,
    InternalMergePointLookupCount = 77,
    TotalMetricCount = 80,
}

impl PerfMetric {
    /// Returns the name of this metric as it appears in RocksDB C++
    pub const fn name(&self) -> &'static str {
        match self {
            PerfMetric::BlobCacheHitCount => "blob_cache_hit_count",
            PerfMetric::BlobChecksumTime => "blob_checksum_time",
            PerfMetric::BlobDecompressTime => "blob_decompress_time",
            PerfMetric::BlobReadByte => "blob_read_byte",
            PerfMetric::BlobReadCount => "blob_read_count",
            PerfMetric::BlobReadTime => "blob_read_time",
            PerfMetric::BlockCacheHitCount => "block_cache_hit_count",
            PerfMetric::BlockChecksumTime => "block_checksum_time",
            PerfMetric::BlockDecompressTime => "block_decompress_time",
            PerfMetric::BlockReadByte => "block_read_byte",
            PerfMetric::BlockReadCount => "block_read_count",
            PerfMetric::BlockReadCpuTime => "block_read_cpu_time",
            PerfMetric::BlockReadTime => "block_read_time",
            PerfMetric::BlockSeekNanos => "block_seek_nanos",
            PerfMetric::BloomMemtableHitCount => "bloom_memtable_hit_count",
            PerfMetric::BloomMemtableMissCount => "bloom_memtable_miss_count",
            PerfMetric::BloomSstHitCount => "bloom_sst_hit_count",
            PerfMetric::BloomSstMissCount => "bloom_sst_miss_count",
            PerfMetric::DbConditionWaitNanos => "db_condition_wait_nanos",
            PerfMetric::DbMutexLockNanos => "db_mutex_lock_nanos",
            PerfMetric::EnvCreateDirIfMissingNanos => "env_create_dir_if_missing_nanos",
            PerfMetric::EnvCreateDirNanos => "env_create_dir_nanos",
            PerfMetric::EnvDeleteDirNanos => "env_delete_dir_nanos",
            PerfMetric::EnvDeleteFileNanos => "env_delete_file_nanos",
            PerfMetric::EnvFileExistsNanos => "env_file_exists_nanos",
            PerfMetric::EnvGetChildrenFileAttributesNanos => "env_get_children_file_attributes_nanos",
            PerfMetric::EnvGetChildrenNanos => "env_get_children_nanos",
            PerfMetric::EnvGetFileModificationTimeNanos => "env_get_file_modification_time_nanos",
            PerfMetric::EnvGetFileSizeNanos => "env_get_file_size_nanos",
            PerfMetric::EnvLinkFileNanos => "env_link_file_nanos",
            PerfMetric::EnvLockFileNanos => "env_lock_file_nanos",
            PerfMetric::EnvNewDirectoryNanos => "env_new_directory_nanos",
            PerfMetric::EnvNewLoggerNanos => "env_new_logger_nanos",
            PerfMetric::EnvNewRandomAccessFileNanos => "env_new_random_access_file_nanos",
            PerfMetric::EnvNewRandomRwFileNanos => "env_new_random_rw_file_nanos",
            PerfMetric::EnvNewSequentialFileNanos => "env_new_sequential_file_nanos",
            PerfMetric::EnvNewWritableFileNanos => "env_new_writable_file_nanos",
            PerfMetric::EnvRenameFileNanos => "env_rename_file_nanos",
            PerfMetric::EnvReuseWritableFileNanos => "env_reuse_writable_file_nanos",
            PerfMetric::EnvUnlockFileNanos => "env_unlock_file_nanos",
            PerfMetric::FindNextUserEntryTime => "find_next_user_entry_time",
            PerfMetric::FindTableNanos => "find_table_nanos",
            PerfMetric::GetFromMemtableCount => "get_from_memtable_count",
            PerfMetric::GetFromMemtableTime => "get_from_memtable_time",
            PerfMetric::GetFromOutputFilesTime => "get_from_output_files_time",
            PerfMetric::GetPostProcessTime => "get_post_process_time",
            PerfMetric::GetReadBytes => "get_read_bytes",
            PerfMetric::GetSnapshotTime => "get_snapshot_time",
            PerfMetric::InternalDeleteSkippedCount => "internal_delete_skipped_count",
            PerfMetric::InternalKeySkippedCount => "internal_key_skipped_count",
            PerfMetric::InternalMergeCount => "internal_merge_count",
            PerfMetric::InternalMergePointLookupCount => "internal_merge_point_lookup_count",
            PerfMetric::InternalRangeDelReseekCount => "internal_range_del_reseek_count",
            PerfMetric::InternalRecentSkippedCount => "internal_recent_skipped_count",
            PerfMetric::IterReadBytes => "iter_read_bytes",
            PerfMetric::KeyLockWaitCount => "key_lock_wait_count",
            PerfMetric::KeyLockWaitTime => "key_lock_wait_time",
            PerfMetric::MergeOperatorTimeNanos => "merge_operator_time_nanos",
            PerfMetric::MultigetReadBytes => "multiget_read_bytes",
            PerfMetric::NewTableBlockIterNanos => "new_table_block_iter_nanos",
            PerfMetric::NewTableIteratorNanos => "new_table_iterator_nanos",
            PerfMetric::NextOnMemtableCount => "next_on_memtable_count",
            PerfMetric::NumberAsyncSeek => "number_async_seek",
            PerfMetric::PrevOnMemtableCount => "prev_on_memtable_count",
            PerfMetric::ReadFilterBlockNanos => "read_filter_block_nanos",
            PerfMetric::ReadIndexBlockNanos => "read_index_block_nanos",
            PerfMetric::SeekChildSeekCount => "seek_child_seek_count",
            PerfMetric::SeekChildSeekTime => "seek_child_seek_time",
            PerfMetric::SeekInternalSeekTime => "seek_internal_seek_time",
            PerfMetric::SeekMaxHeapTime => "seek_max_heap_time",
            PerfMetric::SeekMinHeapTime => "seek_min_heap_time",
            PerfMetric::SeekOnMemtableCount => "seek_on_memtable_count",
            PerfMetric::SeekOnMemtableTime => "seek_on_memtable_time",
            PerfMetric::TotalMetricCount => "total_metric_count",
            PerfMetric::UserKeyComparisonCount => "user_key_comparison_count",
            PerfMetric::WriteDelayTime => "write_delay_time",
            PerfMetric::WriteMemtableTime => "write_memtable_time",
            PerfMetric::WritePreAndPostProcessTime => "write_pre_and_post_process_time",
            PerfMetric::WriteWalTime => "write_wal_time",
        }
    }
}
